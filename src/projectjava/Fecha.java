/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectjava;

import controller.Controlador;
import static java.lang.Integer.parseInt;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.DB;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;

/**
 *
 * @author Luis
 */
public class Fecha extends javax.swing.JFrame {

    /**
     * Creates new form Fecha
     */
    Controlador control = Controlador.getInstance();
    AreaTrabajo area;
    UtilDateModel model = new UtilDateModel();
    UtilDateModel model1 = new UtilDateModel();
    JDatePanelImpl datePanel,datePanel1;
    JDatePickerImpl botonFecha, botonFecha1;
    JComboBox combo = new JComboBox();
    Properties p = new Properties();

    JPanel panel = new JPanel();
    
    JLabel label1 = new JLabel("Desde");
    JLabel label2 = new JLabel("Hasta");
    JLabel label3 = new JLabel("Fecha");  
    JLabel label4 = new JLabel("Rango");
    String mess = "", diaa = "", mess1 = "", diaa1 = "";
    String fech = "", fech1 = "", nombreCampo = "";
    float val = 0;
    ArrayList resultados = new ArrayList();
    float[] valor;
    ResultSet res = null;
    
    boolean tipo = false;
    
    public Fecha(Controlador controlador){
        initComponents();
        ButtonTabComponent boton;
        tipo = false;
        this.control = controlador;
        
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");
        
        // 1 DATEPANEL
        datePanel = new JDatePanelImpl(model, p);
        botonFecha = new JDatePickerImpl(datePanel, new DateLabelFormatter());
        panel.add(label3);
        panel.add(botonFecha);
        
        add(panel);       
        
        panel.setSize(260, 100);
        setVisible(true);
        setLocationRelativeTo(null);
        setResizable(false);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setSize(260, 140);      
    }   
    
    public Fecha(String name) {
        initComponents();
        
        ButtonTabComponent boton;
        tipo = true;
        label1.setVisible(true);
        label2.setVisible(true);
        label4.setVisible(true);
        this.nombreCampo = name;
        
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");
        
        // 1 DATEPANEL
        datePanel = new JDatePanelImpl(model, p);
        botonFecha = new JDatePickerImpl(datePanel, new DateLabelFormatter());
        panel.add(label1);
        panel.add(botonFecha);
        
        
        // 2 DATEPANEL
        datePanel1 = new JDatePanelImpl(model1, p);
        botonFecha1 = new JDatePickerImpl(datePanel1, new DateLabelFormatter());
        panel.add(label2);
        panel.add(botonFecha1);
        combo.addItem("Semanal"); //6 meses
        combo.addItem("Quincenal"); //1 año
        combo.addItem("Mensual"); //2 años
        combo.addItem("Trimestral");//6 años
        combo.addItem("Semestral");// 12 años
        combo.addItem("Anual");//24 años
      
        panel.add(label4);
        panel.add(combo);
        add(panel);       
        
        panel.setSize(260, 100);
        setVisible(true);
        setLocationRelativeTo(null);
        setResizable(false);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setSize(260, 200);      
    }
    
    
    public void crearFechas(){
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");
        datePanel = new JDatePanelImpl(model, p);
        botonFecha = new JDatePickerImpl(datePanel, new DateLabelFormatter());
        
        panel.setSize(260, 100);
        panel.add(botonFecha);

        add(panel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aceptar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Ingrese fecha:");
        setPreferredSize(new java.awt.Dimension(250, 270));

        aceptar.setText("Aceptar");
        aceptar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aceptarMouseClicked(evt);
            }
        });
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(aceptar)
                .addGap(18, 18, 18)
                .addComponent(cancelar)
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(116, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aceptar)
                    .addComponent(cancelar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarActionPerformed
        if (tipo == false){
            dispose();
            DB datos = DB.getInstance();
            int mes = botonFecha.getModel().getMonth()+1;
            int dia = botonFecha.getModel().getDay();
            if (dia<10) diaa = "0"+dia; else diaa = ""+dia;
            if (mes<10) mess = "0"+mes; else mess = ""+mes;
            fech = diaa+"-"+mess+"-"+botonFecha.getModel().getYear();
            control.setFecha(fech);
            datos.setFecha(control.getFecha());
            datos.getDatoPorPosicion(3);
            if(datos.getResultado()!=null && datePanel.getModel().getValue()!=null){
                control.dibujar();
            }
            else JOptionPane.showMessageDialog(this, "No existe registro en esta fecha.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            dispose();
            DB datos = new DB();
            int mes = botonFecha.getModel().getMonth()+1;
            int dia = botonFecha.getModel().getDay();
            if (dia<10) diaa = "0"+dia; else diaa = ""+dia;
            if (mes<10) mess = "0"+mes; else mess = ""+mes;
            
            int mes1 = botonFecha1.getModel().getMonth()+1;
            int dia1 = botonFecha1.getModel().getDay();
            if (dia1<10) diaa1 = "0"+dia1; else diaa1 = ""+dia1;
            if (mes1<10) mess1 = "0"+mes1; else mess1 = ""+mes1;
            
            fech = diaa+"-"+mess+"-"+botonFecha.getModel().getYear();
            fech1 = diaa1+"-"+mess1+"-"+botonFecha1.getModel().getYear();
                              
            
            
                
//################SELECCION DE TIPO DE FILTRADO############################
            if(combo.getSelectedItem().equals("Semanal"))
            {
                Calendar calendar = Calendar.getInstance();
                calendar.setFirstDayOfWeek(Calendar.SUNDAY);
                calendar.setMinimalDaysInFirstWeek(2);
                calendar.setTime((Date) botonFecha.getModel().getValue());
                int numberWeekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);
                Calendar calendar1 = Calendar.getInstance();
                calendar1.setFirstDayOfWeek( Calendar.MONDAY);
                calendar1.setMinimalDaysInFirstWeek( 4 );
                calendar1.setTime((Date) botonFecha1.getModel().getValue());
                int numberWeekOfYear1 = calendar1.get(Calendar.WEEK_OF_YEAR);
                
                Calendar suma = Calendar.getInstance();
                suma.setTime((Date) botonFecha.getModel().getValue());
                
                Calendar suma1 = Calendar.getInstance();
                suma1.setTime((Date) botonFecha.getModel().getValue());
                                
                int prom = 0;
                int numVeces = 0;
                
                if((numberWeekOfYear1 - numberWeekOfYear) < 24)
                {                    
                    for(int i = numberWeekOfYear; i < numberWeekOfYear1; i++)
                    {                       
                        for(int j = 0; j < 7; j++)
                        {
                            suma.add(Calendar.DATE, 1);
                            String fec = ""+suma.getTime();
                            String partFec[] = fec.split(" ");
                            String mesFec = "";
                            switch(partFec[1])
                            {
                                case "Jan":  mesFec = "0"+1; break;
                                case "Feb":  mesFec = "0"+2; break;
                                case "Mar":  mesFec = "0"+3; break;
                                case "Apr":  mesFec = "0"+4; break;
                                case "May":  mesFec = "0"+5; break;
                                case "Jun":  mesFec = "0"+6; break;
                                case "Jul":  mesFec = "0"+7; break;
                                case "Aug":  mesFec = "0"+8; break;
                                case "Sep":  mesFec = "0"+9; break;
                                case "Oct":  mesFec = ""+10; break;
                                case "Nov":  mesFec = ""+11; break;
                                case "Dec":  mesFec = ""+12; break;
                            }
                            
                        String fechaa = partFec[2]+"-"+mesFec+"-"+partFec[5];
                        
                        Formulas form = new Formulas(fechaa);
                            switch (nombreCampo){
                                case "Mantenimiento \npredictivo":
                                    if((form.getMantenimientoPredictivo().equals("NaN")) || (form.getMantenimientoPredictivo().equals("0.0"))){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getMantenimientoPredictivo());
                                    }
                                    break;
                                case "Mantenimiento \npreventivo": 
                                    if(form.getMantenimientoPreventivo().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getMantenimientoPreventivo());
                                    }
                                    break;
                                case "Planificación":
                                    if(form.getPlanificacion().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getPlanificacion());
                                    }
                                    break;
                                case "Programación":
                                    if(form.getProgramacion().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getProgramacion());
                                    }
                                    break;
                                case "Ejecución":
                                    if(form.getEjecucion().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getEjecucion());
                                    }
                                    break;
                                case "Gestión de las \nparadas de planta":
                                    if(form.getGestionProyectos().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getGestionProyectos());
                                    }
                                    break;
                                case "Punto de pedido":
                                    if(form.getPuntoPedido().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getPuntoPedido());
                                    }
                                    break;
                                case "Cantidad de pedido":
                                    if(form.getCantidadPedido().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getCantidadPedido());
                                    }
                                    break;
                                case "Materiales \nobsoletos":
                                    if(form.getMaterialesObsoletos().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getMaterialesObsoletos());
                                    }
                                    break;
                                case "ACR":
                                    if(form.getACR().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getACR());
                                    }
                                    break;
                                case "Mantenimiento \nplanificado":
                                    if(form.getMantenimientoPlanificado().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getMantenimientoPlanificado());
                                    }
                                    break;
                                case "Inventarios":
                                    if(form.getInventarios().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getInventarios());
                                    }
                                    break;
                                case "Factor de utilización de \nla capacidad instalada":
                                    if(form.getFactorUtilizacion().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getFactorUtilizacion());
                                    }
                                    break;
                                case "Confiabilidad":
                                    if(form.getConfiabilidad().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getConfiabilidad());
                                    }
                                    break;
                                case "MTTR":
                                    if(form.getMTTR().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getMTTR());
                                    }
                                    break;
                                case "Disponibilidad":
                                    if(form.getDisponibilidad().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getDisponibilidad());
                                    }
                                    break;
                                case "Costos":
                                    if(form.getCostos().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getCostos());
                                    }
                                    break;
                                case "Ingresos":
                                   
                                    break;
                                case "AO":
                                   
                                    break;
                                case "EBIT":
                                   
                                    break;
                                case "EVA":
                                    
                                    break;

                                default:
                                    System.out.println("No existente.");
                                    break;
                            }
                            
                        }
                        resultados.add(val/numVeces);
                        val = 0;
                        numVeces = 0;
                    }
                }
                else
                {
                    System.out.println("No");
                }
            }
            
 /* QUINCENAL ################################################*/
            if(combo.getSelectedItem().equals("Quincenal"))
            {
                Calendar calendar = Calendar.getInstance();
                calendar.setFirstDayOfWeek(Calendar.SUNDAY);
                calendar.setMinimalDaysInFirstWeek(2);
                calendar.setTime((Date) botonFecha.getModel().getValue());
                int numberWeekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);
                Calendar calendar1 = Calendar.getInstance();
                calendar1.setFirstDayOfWeek( Calendar.MONDAY);
                calendar1.setMinimalDaysInFirstWeek( 4 );
                calendar1.setTime((Date) botonFecha1.getModel().getValue());
                int numberWeekOfYear1 = calendar1.get(Calendar.WEEK_OF_YEAR);
                
                Calendar suma = Calendar.getInstance();
                suma.setTime((Date) botonFecha.getModel().getValue());
                
                Calendar suma1 = Calendar.getInstance();
                suma1.setTime((Date) botonFecha.getModel().getValue());
                                
                int prom = 0;
                int numVeces = 1;
                
                if(((numberWeekOfYear - numberWeekOfYear1)/2) < 24)
                {                    
                    for(int i = numberWeekOfYear; i < numberWeekOfYear1; i++)
                    {                       
                        for(int j = 0; j < 7; j++)
                        {
                            suma.add(Calendar.DATE, 1);
                            String fec = ""+suma.getTime();
                            String partFec[] = fec.split(" ");
                            String mesFec = "";
                            switch(partFec[1])
                            {
                                case "Jan":  mesFec = "0"+1; break;
                                case "Feb":  mesFec = "0"+2; break;
                                case "Mar":  mesFec = "0"+3; break;
                                case "Apr":  mesFec = "0"+4; break;
                                case "May":  mesFec = "0"+5; break;
                                case "Jun":  mesFec = "0"+6; break;
                                case "Jul":  mesFec = "0"+7; break;
                                case "Aug":  mesFec = "0"+8; break;
                                case "Sep":  mesFec = "0"+9; break;
                                case "Oct":  mesFec = ""+10; break;
                                case "Nov":  mesFec = ""+11; break;
                                case "Dec":  mesFec = ""+12; break;
                            }
                            
                        String fechaa = partFec[2]+"-"+mesFec+"-"+partFec[5];
                        
                        Formulas form = new Formulas(fechaa);
                            switch (nombreCampo){
                                case "Mantenimiento \npredictivo":
                                    if(form.getMantenimientoPredictivo().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getMantenimientoPredictivo());
                                    }
                                    break;
                                case "Mantenimiento \npreventivo": 
                                    if(form.getMantenimientoPreventivo().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getMantenimientoPreventivo());
                                    }
                                    break;
                                case "Planificación":
                                    if(form.getPlanificacion().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getPlanificacion());
                                    }
                                    break;
                                case "Programación":
                                    if(form.getProgramacion().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getProgramacion());
                                    }
                                    break;
                                case "Ejecución":
                                    if(form.getEjecucion().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getEjecucion());
                                    }
                                    break;
                                case "Gestión de las \nparadas de planta":
                                    if(form.getGestionProyectos().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getGestionProyectos());
                                    }
                                    break;
                                case "Punto de pedido":
                                    if(form.getPuntoPedido().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getPuntoPedido());
                                    }
                                    break;
                                case "Cantidad de pedido":
                                    if(form.getCantidadPedido().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getCantidadPedido());
                                    }
                                    break;
                                case "Materiales \nobsoletos":
                                    if(form.getMaterialesObsoletos().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getMaterialesObsoletos());
                                    }
                                    break;
                                case "ACR":
                                    if(form.getACR().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getACR());
                                    }
                                    break;
                                case "Mantenimiento \nplanificado":
                                    if(form.getMantenimientoPlanificado().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getMantenimientoPlanificado());
                                    }
                                    break;
                                case "Inventarios":
                                    if(form.getInventarios().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getInventarios());
                                    }
                                    break;
                                case "Factor de utilización de \nla capacidad instalada":
                                    if(form.getFactorUtilizacion().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getFactorUtilizacion());
                                    }
                                    break;
                                case "Confiabilidad":
                                    if(form.getConfiabilidad().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getConfiabilidad());
                                    }
                                    break;
                                case "MTTR":
                                    if(form.getMTTR().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getMTTR());
                                    }
                                    break;
                                case "Disponibilidad":
                                    if(form.getDisponibilidad().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getDisponibilidad());
                                    }
                                    break;
                                case "Costos":
                                    if(form.getCostos().equals("NaN")){}
                                    else{
                                        numVeces++;
                                        val += Float.parseFloat(form.getCostos());
                                    }
                                    break;
                                case "Ingresos":
                                   
                                    break;
                                case "AO":
                                   
                                    break;
                                case "EBIT":
                                   
                                    break;
                                case "EVA":
                                    
                                    break;

                                default:
                                    System.out.println("No existente.");
                                    break;
                            }
                            
                        }
                        resultados.add(val/numVeces);
                        val = 1;
                        numVeces = 1;
                    }
                }
                else
                {
                    System.out.println("No");
                }
            }
 /* MENSUAL ################################################*/

            if(combo.getSelectedItem().equals("Mensual"))
            {
                resultados.clear();
                Calendar startCalendar = Calendar.getInstance();
                startCalendar.setTime((Date) botonFecha.getModel().getValue());
                //Fecha finalización en objeto Calendar
                Calendar endCalendar = Calendar.getInstance();
                endCalendar.setTime((Date) botonFecha1.getModel().getValue());
                //Cálculo de meses para las fechas de inicio y finalización
                int startMes = (startCalendar.get(Calendar.YEAR) * 12) + startCalendar.get(Calendar.MONTH);
                int endMes = (endCalendar.get(Calendar.YEAR) * 12) + endCalendar.get(Calendar.MONTH);
                //Diferencia en meses entre las dos fechas
                int diffMonth = endMes - startMes;
                   
                if(diffMonth < 24){
                    for(int i = startMes; i < endMes; i++){
                        startCalendar.add(Calendar.MONTH, 1);
                        String fec = ""+startCalendar.getTime();
                        String partFec[] = fec.split(" ");
                        String mesFec = "";
                        switch(partFec[1]){
                            case "Jan":  mesFec = "0"+1; break;
                            case "Feb":  mesFec = "0"+2; break;
                            case "Mar":  mesFec = "0"+3; break;
                            case "Apr":  mesFec = "0"+4; break;
                            case "May":  mesFec = "0"+5; break;
                            case "Jun":  mesFec = "0"+6; break;
                            case "Jul":  mesFec = "0"+7; break;
                            case "Aug":  mesFec = "0"+8; break;
                            case "Sep":  mesFec = "0"+9; break;
                            case "Oct":  mesFec = ""+10; break;
                            case "Nov":  mesFec = ""+11; break;
                            case "Dec":  mesFec = ""+12; break;
                        }
                            
                        String fechaa = ""+mesFec+"-"+partFec[5];
                        datos.setFecha(fechaa);
                        datos.getDatoPorPosicionMes(3);
                        
                    Formulas form;
                        try {
                            form = new Formulas(fechaa, "", "mes");
                            
                            switch (nombreCampo){
                                case "Mantenimiento \npredictivo":
                                    if(String.valueOf(form.mantenPreventivoR).equals("NaN")){}
                                    else{ resultados.add(form.mantenPredictivoR); }
                                    break;
                                case "Mantenimiento \npreventivo": 
                                    if(String.valueOf(form.mantenPreventivoR).equals("NaN")){}
                                    else{ resultados.add(form.mantenPreventivoR);}
                                    break;
                                case "Planificación":
                                    if(String.valueOf(form.planificacionR).equals("NaN")){}
                                    else{ resultados.add(form.planificacionR); }
                                    break;
                                case "Programación":
                                    if(String.valueOf(form.programacionR).equals("NaN")){}
                                    else{ resultados.add(form.programacionR); }
                                    break;
                                case "Ejecución":
                                    if(String.valueOf(form.ejecucionR).equals("NaN")){}
                                    else{ resultados.add(form.ejecucionR);}
                                    break;
                                case "Gestión de las \nparadas de planta":
                                    if(String.valueOf(form.gestionProyectosR).equals("NaN")){}
                                    else{ resultados.add(form.gestionProyectosR);}
                                    break;
                                case "Punto de pedido":
                                    if(String.valueOf(form.puntoPedidoR).equals("NaN")){}
                                    else{  resultados.add(form.puntoPedidoR); }
                                    break;
                                case "Cantidad de pedido":
                                    if(String.valueOf(form.cantidadPedidoR).equals("NaN")){}
                                    else{ resultados.add(form.cantidadPedidoR);  }
                                    break;
                                case "Materiales \nobsoletos":
                                    if(String.valueOf(form.materialesObsoletosR).equals("NaN")){}
                                    else{ resultados.add(form.materialesObsoletosR); }
                                    break;
                                case "ACR":
                                    if(String.valueOf(form.acrR).equals("NaN")){}
                                    else{ resultados.add(form.acrR);  }
                                    break;
                                case "Mantenimiento \nplanificado":
                                    if(String.valueOf(form.mantenPlanificadoR).equals("NaN")){}
                                    else{ resultados.add(form.mantenPlanificadoR); }
                                    break;
                                case "Inventarios":
                                    if(String.valueOf(form.inventariosR).equals("NaN")){}
                                    else{ resultados.add(form.inventariosR);}
                                    break;
                                case "Factor de utilización de \nla capacidad instalada":
                                    if(String.valueOf(form.factorUtilizacionR).equals("NaN")){}
                                    else{ resultados.add(form.factorUtilizacionR); }
                                    break;
                                case "Confiabilidad":
                                    if(String.valueOf(form.confiabilidadR).equals("NaN")){}
                                    else{ resultados.add(form.confiabilidadR);}
                                    break;
                                case "MTTR":
                                    if(String.valueOf(form.mttrR).equals("NaN")){}
                                    else{ resultados.add(form.mttrR);}
                                    break;
                                case "Disponibilidad":
                                    if(String.valueOf(form.disponibilidadR).equals("NaN")){}
                                    else{ resultados.add(form.disponibilidadR); }
                                    break;
                                case "Costos":
                                    if(String.valueOf(form.costosR).equals("NaN")){}
                                    else{ resultados.add(form.costosR); }
                                    break;
                                case "Ingresos":
                                   
                                    break;
                                case "AO":
                                   
                                    break;
                                case "EBIT":
                                   
                                    break;
                                case "EVA":
                                    
                                    break;

                                default:
                                    System.out.println("No existente.");
                                    break;
                            }
                        } catch (ParseException ex) {
                            Logger.getLogger(Fecha.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        
                    } 
                }
                else
                {
                    System.out.println("No");
                } 
            }
            
            
 /* TRIMESTRAL ################################################*/

            if(combo.getSelectedItem().equals("Trimestral"))
            {
                resultados.clear();
                Calendar startCalendar = Calendar.getInstance();
                startCalendar.setTime((Date) botonFecha.getModel().getValue());
                //Fecha finalización en objeto Calendar
                Calendar endCalendar = Calendar.getInstance();
                endCalendar.setTime((Date) botonFecha1.getModel().getValue());
                //Cálculo de meses para las fechas de inicio y finalización
                int startMes = (startCalendar.get(Calendar.YEAR) * 12) + startCalendar.get(Calendar.MONTH);
                int endMes = (endCalendar.get(Calendar.YEAR) * 12) + endCalendar.get(Calendar.MONTH);
                
                int diffMonth = endMes - startMes;
                
                Calendar suma = Calendar.getInstance();
                suma.setTime((Date) botonFecha.getModel().getValue());
                   
                if((diffMonth/3) < 24){                    
                    for(int i = startMes; i <= endMes; i+=3)
                    {
                        suma.add(Calendar.MONTH, 3);
                        String fec1 = ""+suma.getTime();
                        String partFec1[] = fec1.split(" ");
                        String mesFec1 = "";
                        switch(partFec1[1]){
                            case "Jan":  mesFec1 = "0"+1; break;
                            case "Feb":  mesFec1 = "0"+2; break;
                            case "Mar":  mesFec1 = "0"+3; break;
                            case "Apr":  mesFec1 = "0"+4; break;
                            case "May":  mesFec1 = "0"+5; break;
                            case "Jun":  mesFec1 = "0"+6; break;
                            case "Jul":  mesFec1 = "0"+7; break;
                            case "Aug":  mesFec1 = "0"+8; break;
                            case "Sep":  mesFec1 = "0"+9; break;
                            case "Oct":  mesFec1 = ""+10; break;
                            case "Nov":  mesFec1 = ""+11; break;
                            case "Dec":  mesFec1 = ""+12; break;
                        }
                            
                        String fechaa1 = ""+mesFec1+"-"+partFec1[5];
                        
                        
                        String fec = ""+startCalendar.getTime();
                        String partFec[] = fec.split(" ");
                        String mesFec = "";
                        switch(partFec[1]){
                            case "Jan":  mesFec = "0"+1; break;
                            case "Feb":  mesFec = "0"+2; break;
                            case "Mar":  mesFec = "0"+3; break;
                            case "Apr":  mesFec = "0"+4; break;
                            case "May":  mesFec = "0"+5; break;
                            case "Jun":  mesFec = "0"+6; break;
                            case "Jul":  mesFec = "0"+7; break;
                            case "Aug":  mesFec = "0"+8; break;
                            case "Sep":  mesFec = "0"+9; break;
                            case "Oct":  mesFec = ""+10; break;
                            case "Nov":  mesFec = ""+11; break;
                            case "Dec":  mesFec = ""+12; break;
                        }
                            
                        String fechaa = ""+mesFec+"-"+partFec[5];
                        
                        try {
                            Formulas form = new Formulas("01-"+fechaa, "01-"+fechaa1,"trimestralYsemestral");
                            
                            switch (nombreCampo){
                                case "Mantenimiento \npredictivo":
                                    if(String.valueOf(form.mantenPreventivoR).equals("NaN")){}
                                    else{ resultados.add(form.mantenPredictivoR); }
                                    break;
                                case "Mantenimiento \npreventivo": 
                                    if(String.valueOf(form.mantenPreventivoR).equals("NaN")){}
                                    else{ resultados.add(form.mantenPreventivoR);}
                                    break;
                                case "Planificación":
                                    if(String.valueOf(form.planificacionR).equals("NaN")){}
                                    else{ resultados.add(form.planificacionR); }
                                    break;
                                case "Programación":
                                    if(String.valueOf(form.programacionR).equals("NaN")){}
                                    else{ resultados.add(form.programacionR); }
                                    break;
                                case "Ejecución":
                                    if(String.valueOf(form.ejecucionR).equals("NaN")){}
                                    else{ resultados.add(form.ejecucionR);}
                                    break;
                                case "Gestión de las \nparadas de planta":
                                    if(String.valueOf(form.gestionProyectosR).equals("NaN")){}
                                    else{ resultados.add(form.gestionProyectosR);}
                                    break;
                                case "Punto de pedido":
                                    if(String.valueOf(form.puntoPedidoR).equals("NaN")){}
                                    else{  resultados.add(form.puntoPedidoR); }
                                    break;
                                case "Cantidad de pedido":
                                    if(String.valueOf(form.cantidadPedidoR).equals("NaN")){}
                                    else{ resultados.add(form.cantidadPedidoR);  }
                                    break;
                                case "Materiales \nobsoletos":
                                    if(String.valueOf(form.materialesObsoletosR).equals("NaN")){}
                                    else{ resultados.add(form.materialesObsoletosR); }
                                    break;
                                case "ACR":
                                    if(String.valueOf(form.acrR).equals("NaN")){}
                                    else{ resultados.add(form.acrR);  }
                                    break;
                                case "Mantenimiento \nplanificado":
                                    if(String.valueOf(form.mantenPlanificadoR).equals("NaN")){}
                                    else{ resultados.add(form.mantenPlanificadoR); }
                                    break;
                                case "Inventarios":
                                    if(String.valueOf(form.inventariosR).equals("NaN")){}
                                    else{ resultados.add(form.inventariosR);}
                                    break;
                                case "Factor de utilización de \nla capacidad instalada":
                                    if(String.valueOf(form.factorUtilizacionR).equals("NaN")){}
                                    else{ resultados.add(form.factorUtilizacionR); }
                                    break;
                                case "Confiabilidad":
                                    if(String.valueOf(form.confiabilidadR).equals("NaN")){}
                                    else{ resultados.add(form.confiabilidadR);}
                                    break;
                                case "MTTR":
                                    if(String.valueOf(form.mttrR).equals("NaN")){}
                                    else{ resultados.add(form.mttrR);}
                                    break;
                                case "Disponibilidad":
                                    if(String.valueOf(form.disponibilidadR).equals("NaN")){}
                                    else{ resultados.add(form.disponibilidadR); }
                                    break;
                                case "Costos":
                                    if(String.valueOf(form.costosR).equals("NaN")){}
                                    else{ resultados.add(form.costosR); }
                                    break;
                                case "Ingresos":
                                   
                                    break;
                                case "AO":
                                   
                                    break;
                                case "EBIT":
                                   
                                    break;
                                case "EVA":
                                    
                                    break;

                                default:
                                    System.out.println("No existente.");
                                    break;
                            }
                        } catch (ParseException ex) {
                            Logger.getLogger(Fecha.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        startCalendar.add(Calendar.MONTH, 3);                   
                    }
                }   
            }
            
 /* SEMESTRAL ################################################*/

            if(combo.getSelectedItem().equals("Semestral"))
            {
                resultados.clear();
                Calendar startCalendar = Calendar.getInstance();
                startCalendar.setTime((Date) botonFecha.getModel().getValue());
                //Fecha finalización en objeto Calendar
                Calendar endCalendar = Calendar.getInstance();
                endCalendar.setTime((Date) botonFecha1.getModel().getValue());
                //Cálculo de meses para las fechas de inicio y finalización
                int startMes = (startCalendar.get(Calendar.YEAR) * 12) + startCalendar.get(Calendar.MONTH);
                int endMes = (endCalendar.get(Calendar.YEAR) * 12) + endCalendar.get(Calendar.MONTH);
                
                int diffMonth = endMes - startMes;
                
                Calendar suma = Calendar.getInstance();
                suma.setTime((Date) botonFecha.getModel().getValue());
                   
                if((diffMonth/6) < 24){                    
                    for(int i = startMes; i <= endMes; i+=6)
                    {
                        suma.add(Calendar.MONTH, 6);
                        String fec1 = ""+suma.getTime();
                        String partFec1[] = fec1.split(" ");
                        String mesFec1 = "";
                        switch(partFec1[1]){
                            case "Jan":  mesFec1 = "0"+1; break;
                            case "Feb":  mesFec1 = "0"+2; break;
                            case "Mar":  mesFec1 = "0"+3; break;
                            case "Apr":  mesFec1 = "0"+4; break;
                            case "May":  mesFec1 = "0"+5; break;
                            case "Jun":  mesFec1 = "0"+6; break;
                            case "Jul":  mesFec1 = "0"+7; break;
                            case "Aug":  mesFec1 = "0"+8; break;
                            case "Sep":  mesFec1 = "0"+9; break;
                            case "Oct":  mesFec1 = ""+10; break;
                            case "Nov":  mesFec1 = ""+11; break;
                            case "Dec":  mesFec1 = ""+12; break;
                        }
                            
                        String fechaa1 = ""+mesFec1+"-"+partFec1[5];
                        
                        
                        String fec = ""+startCalendar.getTime();
                        String partFec[] = fec.split(" ");
                        String mesFec = "";
                        switch(partFec[1]){
                            case "Jan":  mesFec = "0"+1; break;
                            case "Feb":  mesFec = "0"+2; break;
                            case "Mar":  mesFec = "0"+3; break;
                            case "Apr":  mesFec = "0"+4; break;
                            case "May":  mesFec = "0"+5; break;
                            case "Jun":  mesFec = "0"+6; break;
                            case "Jul":  mesFec = "0"+7; break;
                            case "Aug":  mesFec = "0"+8; break;
                            case "Sep":  mesFec = "0"+9; break;
                            case "Oct":  mesFec = ""+10; break;
                            case "Nov":  mesFec = ""+11; break;
                            case "Dec":  mesFec = ""+12; break;
                        }
                            
                        String fechaa = ""+mesFec+"-"+partFec[5];
                        try {
                            Formulas form = new Formulas("01-"+fechaa, "01-"+fechaa1,"trimestralYsemestral");
                            
                            switch (nombreCampo){
                                case "Mantenimiento \npredictivo":
                                    if(String.valueOf(form.mantenPreventivoR).equals("NaN")){}
                                    else{ resultados.add(form.mantenPredictivoR); }
                                    break;
                                case "Mantenimiento \npreventivo": 
                                    if(String.valueOf(form.mantenPreventivoR).equals("NaN")){}
                                    else{ resultados.add(form.mantenPreventivoR);}
                                    break;
                                case "Planificación":
                                    if(String.valueOf(form.planificacionR).equals("NaN")){}
                                    else{ resultados.add(form.planificacionR); }
                                    break;
                                case "Programación":
                                    if(String.valueOf(form.programacionR).equals("NaN")){}
                                    else{ resultados.add(form.programacionR); }
                                    break;
                                case "Ejecución":
                                    if(String.valueOf(form.ejecucionR).equals("NaN")){}
                                    else{ resultados.add(form.ejecucionR);}
                                    break;
                                case "Gestión de las \nparadas de planta":
                                    if(String.valueOf(form.gestionProyectosR).equals("NaN")){}
                                    else{ resultados.add(form.gestionProyectosR);}
                                    break;
                                case "Punto de pedido":
                                    if(String.valueOf(form.puntoPedidoR).equals("NaN")){}
                                    else{  resultados.add(form.puntoPedidoR); }
                                    break;
                                case "Cantidad de pedido":
                                    if(String.valueOf(form.cantidadPedidoR).equals("NaN")){}
                                    else{ resultados.add(form.cantidadPedidoR);  }
                                    break;
                                case "Materiales \nobsoletos":
                                    if(String.valueOf(form.materialesObsoletosR).equals("NaN")){}
                                    else{ resultados.add(form.materialesObsoletosR); }
                                    break;
                                case "ACR":
                                    if(String.valueOf(form.acrR).equals("NaN")){}
                                    else{ resultados.add(form.acrR);  }
                                    break;
                                case "Mantenimiento \nplanificado":
                                    if(String.valueOf(form.mantenPlanificadoR).equals("NaN")){}
                                    else{ resultados.add(form.mantenPlanificadoR); }
                                    break;
                                case "Inventarios":
                                    if(String.valueOf(form.inventariosR).equals("NaN")){}
                                    else{ resultados.add(form.inventariosR);}
                                    break;
                                case "Factor de utilización de \nla capacidad instalada":
                                    if(String.valueOf(form.factorUtilizacionR).equals("NaN")){}
                                    else{ resultados.add(form.factorUtilizacionR); }
                                    break;
                                case "Confiabilidad":
                                    if(String.valueOf(form.confiabilidadR).equals("NaN")){}
                                    else{ resultados.add(form.confiabilidadR);}
                                    break;
                                case "MTTR":
                                    if(String.valueOf(form.mttrR).equals("NaN")){}
                                    else{ resultados.add(form.mttrR);}
                                    break;
                                case "Disponibilidad":
                                    if(String.valueOf(form.disponibilidadR).equals("NaN")){}
                                    else{ resultados.add(form.disponibilidadR); }
                                    break;
                                case "Costos":
                                    if(String.valueOf(form.costosR).equals("NaN")){}
                                    else{ resultados.add(form.costosR); }
                                    break;
                                case "Ingresos":
                                   
                                    break;
                                case "AO":
                                   
                                    break;
                                case "EBIT":
                                   
                                    break;
                                case "EVA":
                                    
                                    break;

                                default:
                                    System.out.println("No existente.");
                                    break;
                            }
                            
                        } catch (ParseException ex) {
                            Logger.getLogger(Fecha.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        startCalendar.add(Calendar.MONTH, 6);                   
                    }
                }
            }
 /* ANUAL ################################################*/

            if(combo.getSelectedItem().equals("Anual"))
            {
                resultados.clear();
                int anioInicio = botonFecha.getModel().getYear();
                int anioFinal = botonFecha1.getModel().getYear();
                
                if((anioFinal - anioInicio) < 24){
                    for(int i = anioInicio; i <= anioFinal; i++){                            
                        
                        try {
                            Formulas form = new Formulas(""+i, "","anual");
                            
                            switch (nombreCampo){
                                case "Mantenimiento \npredictivo":
                                    if(String.valueOf(form.mantenPreventivoR).equals("NaN")){}
                                    else{ resultados.add(form.mantenPredictivoR); }
                                    break;
                                case "Mantenimiento \npreventivo": 
                                    if(String.valueOf(form.mantenPreventivoR).equals("NaN")){}
                                    else{ resultados.add(form.mantenPreventivoR);}
                                    break;
                                case "Planificación":
                                    if(String.valueOf(form.planificacionR).equals("NaN")){}
                                    else{ resultados.add(form.planificacionR); }
                                    break;
                                case "Programación":
                                    if(String.valueOf(form.programacionR).equals("NaN")){}
                                    else{ resultados.add(form.programacionR); }
                                    break;
                                case "Ejecución":
                                    if(String.valueOf(form.ejecucionR).equals("NaN")){}
                                    else{ resultados.add(form.ejecucionR);}
                                    break;
                                case "Gestión de las \nparadas de planta":
                                    if(String.valueOf(form.gestionProyectosR).equals("NaN")){}
                                    else{ resultados.add(form.gestionProyectosR);}
                                    break;
                                case "Punto de pedido":
                                    if(String.valueOf(form.puntoPedidoR).equals("NaN")){}
                                    else{  resultados.add(form.puntoPedidoR); }
                                    break;
                                case "Cantidad de pedido":
                                    if(String.valueOf(form.cantidadPedidoR).equals("NaN")){}
                                    else{ resultados.add(form.cantidadPedidoR);  }
                                    break;
                                case "Materiales \nobsoletos":
                                    if(String.valueOf(form.materialesObsoletosR).equals("NaN")){}
                                    else{ resultados.add(form.materialesObsoletosR); }
                                    break;
                                case "ACR":
                                    if(String.valueOf(form.acrR).equals("NaN")){}
                                    else{ resultados.add(form.acrR);  }
                                    break;
                                case "Mantenimiento \nplanificado":
                                    if(String.valueOf(form.mantenPlanificadoR).equals("NaN")){}
                                    else{ resultados.add(form.mantenPlanificadoR); }
                                    break;
                                case "Inventarios":
                                    if(String.valueOf(form.inventariosR).equals("NaN")){}
                                    else{ resultados.add(form.inventariosR);}
                                    break;
                                case "Factor de utilización de \nla capacidad instalada":
                                    if(String.valueOf(form.factorUtilizacionR).equals("NaN")){}
                                    else{ resultados.add(form.factorUtilizacionR); }
                                    break;
                                case "Confiabilidad":
                                    if(String.valueOf(form.confiabilidadR).equals("NaN")){}
                                    else{ resultados.add(form.confiabilidadR);}
                                    break;
                                case "MTTR":
                                    if(String.valueOf(form.mttrR).equals("NaN")){}
                                    else{ resultados.add(form.mttrR);}
                                    break;
                                case "Disponibilidad":
                                    if(String.valueOf(form.disponibilidadR).equals("NaN")){}
                                    else{ resultados.add(form.disponibilidadR); }
                                    break;
                                case "Costos":
                                    if(String.valueOf(form.costosR).equals("NaN")){}
                                    else{ resultados.add(form.costosR); }
                                    break;
                                case "Ingresos":
                                   
                                    break;
                                case "AO":
                                   
                                    break;
                                case "EBIT":
                                   
                                    break;
                                case "EVA":
                                    
                                    break;

                                default:
                                    System.out.println("No existente.");
                                    break;
                            }
                        } catch (ParseException ex) {
                            Logger.getLogger(Fecha.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        
                    } 
                }
                else
                {
                    System.out.println("No");
                } 
            }
            
 //##################################################################
            
               /* 
                  datos.getResultadosRangoDeFecha();
                for (int i = 0; i< datos.resultados.size(); i++){
                    String fecha = String.valueOf(datos.resultados.get(i));
                    Formulas form = new Formulas(fecha);
                    
                    switch (nombreCampo){
                            case "Mantenimiento \npredictivo":
                                resultados.add(form.getMantenimientoPredictivo());
                                form.getMantenimientoPredictivo();
                                break;
                            case "Mantenimiento \npreventivo": 
                                resultados.add(form.getMantenimientoPreventivo());
                                form.getMantenimientoPreventivo();
                                break;
                            case "Planificación":
                                resultados.add(form.getPlanificacion());
                                form.getPlanificacion();
                                break;
                            case "Programación":
                                resultados.add(form.getProgramacion());
                                form.getProgramacion();
                                break;
                            case "Ejecución":
                                resultados.add(form.getEjecucion());
                                form.getEjecucion();
                                break;
                            case "Gestión de las \nparadas de planta":
                                resultados.add(form.getGestionProyectos());
                                form.getGestionProyectos();
                                break;
                            case "Punto de pedido":
                                resultados.add(form.getPuntoPedido());
                                form.getPuntoPedido();
                                break;
                            case "Cantidad de pedido":
                                resultados.add(form.getCantidadPedido());
                                form.getCantidadPedido();
                                break;
                            case "Materiales \nobsoletos":
                                resultados.add(form.getMaterialesObsoletos());
                                form.getMaterialesObsoletos();
                                break;
                            case "ACR":
                                resultados.add(form.getACR());
                                form.getACR();
                                break;
                            case "Mantenimiento \nplanificado":
                                resultados.add(form.getMantenimientoPlanificado());
                                form.getMantenimientoPlanificado();
                                break;
                            case "Inventarios":
                                resultados.add(form.getInventarios());
                                form.getInventarios();
                                break;
                            case "Factor de utilización de \nla capacidad instalada":
                                resultados.add(form.getFactorUtilizacion());
                                form.getFactorUtilizacion();
                                break;
                            case "Confiabilidad":
                                resultados.add(form.getConfiabilidad());
                                form.getConfiabilidad();
                                break;
                            case "MTTR":
                                resultados.add(form.getMTTR());
                                form.getMTTR();
                                break;
                            case "Disponibilidad":
                                resultados.add(form.getDisponibilidad());
                                form.getDisponibilidad();
                                break;
                            case "Costos":
                                resultados.add(form.getCostos());
                                form.getCostos();
                                break;
                            case "Ingresos":
                                break;
                            case "AO":
                                break;
                            case "EBIT":
                                break;
                            case "EVA":
                                break;

                            default:
                                System.out.println("No existente.");
                                break;
                    }
                    
                } */
               VentanaGrafico grafico = new VentanaGrafico(nombreCampo, resultados);
            
        }
    }//GEN-LAST:event_aceptarActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        dispose();
    }//GEN-LAST:event_cancelarActionPerformed

    private void aceptarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aceptarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_aceptarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Fecha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Fecha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Fecha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Fecha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
             //   new Fecha().setVisible(true);
            }
        });
    }
    
    public static int getDayOfTheWeek(Date d){
	GregorianCalendar cal = new GregorianCalendar();
	cal.setTime(d);
	return cal.get(Calendar.DAY_OF_WEEK);		
}
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptar;
    private javax.swing.JButton cancelar;
    // End of variables declaration//GEN-END:variables
}
